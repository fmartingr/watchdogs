// Generated by CoffeeScript 1.6.1
(function() {
  var getHostInfo, getParameterByName, watchdog;

  getParameterByName = function(name, url) {
    var param, regex, regexS, results;
    param = '';
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regexS = "[\\?&]" + name + "=([^&#]*)";
    regex = new RegExp(regexS);
    results = regex.exec(url);
    if (results !== null) {
      param = decodeURIComponent(results[1].replace(/\+/g, " "));
    }
    return param;
  };

  getHostInfo = function() {
    var hostname, key, script, scripts, _i, _len;
    hostname = '';
    scripts = document.getElementsByTagName('script');
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if (script.src.indexOf('/viewer') > 0) {
        hostname = script.src.substr(0, script.src.lastIndexOf('/'));
        key = getParameterByName('key', script.src);
        break;
      }
    }
    return {
      hostname: hostname,
      key: key
    };
  };

  watchdog = {
    socket: null,
    servers: {},
    getServers: function() {
      return this.socket.emit('getServers');
    },
    getServerInfo: function(name) {
      var _this = this;
      return this.socket.emit('getInfo', name, function(result) {
        _this.servers[name] = result;
        return _this.onupdate(name);
      });
    },
    start: function() {
      var _this = this;
      return this.socket.on('update', function(name, info) {
        _this.servers[name] = info;
        return _this.onupdate(name);
      });
    },
    onupdate: function(name) {
      return console.log("Server updated: " + name);
    }
  };

  window.addEventListener('DOMContentLoaded', function() {
    var server, socket;
    server = getHostInfo();
    socket = io.connect(server.hostname);
    return socket.on('connect', function() {
      return socket.emit('register', 'viewer', server.key, function(res) {
        var loadEvent;
        if (res !== 'ack') {
          return console.error('Error registering on server.');
        } else {
          loadEvent = document.createEvent("Event");
          window.watchdog = watchdog;
          window.watchdog.socket = socket;
          window.watchdog.start();
          loadEvent.initEvent("WatchdogLoaded", true, true);
          return document.dispatchEvent(loadEvent);
        }
      });
    });
  });

}).call(this);
