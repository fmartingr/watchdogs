// Generated by CoffeeScript 1.6.1
(function() {
  var Server, getHostInfo, getParameterByName, watchdogs;

  getParameterByName = function(name, url) {
    var param, regex, regexS, results;
    param = '';
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regexS = "[\\?&]" + name + "=([^&#]*)";
    regex = new RegExp(regexS);
    results = regex.exec(url);
    if (results !== null) {
      param = decodeURIComponent(results[1].replace(/\+/g, " "));
    }
    return param;
  };

  getHostInfo = function() {
    var hostname, key, script, scripts, _i, _len;
    hostname = '';
    scripts = document.getElementsByTagName('script');
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      if (script.src.indexOf('/viewer') > 0) {
        hostname = script.src.substr(0, script.src.lastIndexOf('/'));
        key = getParameterByName('key', script.src);
        break;
      }
    }
    return {
      hostname: hostname,
      key: key
    };
  };

  watchdogs = {
    socket: null,
    servers: {},
    getServers: function() {
      return this.socket.emit('getServers');
    },
    getServerInfo: function(name) {
      var _this = this;
      return this.socket.emit('getInfo', name, function(result) {
        _this.servers[name] = result;
        return _this.onupdate(name);
      });
    },
    start: function() {
      var _this = this;
      return this.socket.on('update', function(name, info) {
        if (name in _this.servers) {
          _this.servers[name].updateInfo(info);
        } else {
          _this.servers[name] = new Server(info);
        }
        return _this.onupdate(name);
      });
    },
    onupdate: function(name) {}
  };

  Server = (function() {

    function Server(info) {
      this.updateInfo(info);
    }

    Server.prototype.updateInfo = function(info) {
      return this.info = info;
    };

    Server.prototype.getStatus = function() {
      return this.get('status');
    };

    Server.prototype.getHostname = function() {
      return this.get('hostname');
    };

    Server.prototype.getType = function() {
      return this.get('type');
    };

    Server.prototype.getPlatform = function() {
      return this.get('platform');
    };

    Server.prototype.getArch = function() {
      return this.get('arch');
    };

    Server.prototype.getUptime = function() {
      return this.parseTime(this.get('uptime'));
    };

    Server.prototype.getLoad = function() {
      var fifteen, five, load, one, result;
      result = null;
      load = this.get('load');
      if (load) {
        one = load[0].toFixed(2);
        five = load[1].toFixed(2);
        fifteen = load[2].toFixed(2);
        result = "" + one + ", " + five + ", " + fifteen;
      }
      return result;
    };

    Server.prototype.getTotalMemory = function() {
      return this.parseBytes(this.get('total_memory'));
    };

    Server.prototype.getFreeMemory = function() {
      return this.parseBytes(this.get('free_memory'));
    };

    Server.prototype.getMemory = function() {
      return "" + (this.getFreeMemory()) + "/" + (this.getTotalMemory());
    };

    Server.prototype.get = function(key) {
      var result;
      result = null;
      if (key in this.info) {
        result = this.info[key];
      }
      return result;
    };

    Server.prototype.parseBytes = function(bytes, decimals) {
      var exponents, i, units;
      if (decimals == null) {
        decimals = 2;
      }
      if (isNaN(bytes)) {
        return;
      }
      units = ['bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];
      exponents = Math.floor(Math.log(+bytes) / Math.log(2));
      if (exponents < 1) {
        exponents = 0;
      }
      i = Math.floor(exponents / 10);
      bytes = +bytes / Math.pow(2, 10 * i);
      if (bytes.toString().length > bytes.toFixed(decimals).toString().length) {
        bytes = bytes.toFixed(decimals);
      }
      return "" + bytes + " " + units[i];
    };

    Server.prototype.parseTime = function(time) {
      var hours, minutes, result, seconds;
      hours = Math.floor(time / 3600);
      time %= 3600;
      minutes = Math.floor(time / 60);
      seconds = Math.floor(time % 60);
      result = '';
      if (hours > 0) {
        result = "" + result + hours + "h";
      }
      if (minutes > 0) {
        result = "" + result + " " + minutes + "m";
      }
      return result = "" + result + " " + seconds + "s";
    };

    return Server;

  })();

  window.addEventListener('DOMContentLoaded', function() {
    var server, socket;
    server = getHostInfo();
    socket = io.connect(server.hostname);
    return socket.on('connect', function() {
      return socket.emit('register', 'viewer', server.key, function(res) {
        var loadEvent;
        if (res !== 'ack') {
          return console.error('Error registering on server.');
        } else {
          loadEvent = document.createEvent("Event");
          window.watchdogs = watchdogs;
          window.watchdogs.socket = socket;
          window.watchdogs.start();
          loadEvent.initEvent("WatchdogsLoaded", true, true);
          return document.dispatchEvent(loadEvent);
        }
      });
    });
  });

}).call(this);
